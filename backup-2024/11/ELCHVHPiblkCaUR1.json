{
  "active": true,
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Discord5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Does Not Have Attachment": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Discord6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Discord3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Discord1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Does Not Have Attachment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Has Image",
            "type": "main",
            "index": 0
          },
          {
            "node": "Attachment is TXT file or PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Discord4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get TXT File": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Image": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Get TXT File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get PDF File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get PDF File": {
      "main": [
        [
          {
            "node": "Extract from File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File3": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attachment is TXT file or PDF": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Discord7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory2": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-14T01:27:53.117Z",
  "id": "ELCHVHPiblkCaUR1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "BakaBot",
  "nodes": [
    {
      "parameters": {
        "operation": "binaryToPropery",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "id": "3dc5cc61-9a81-4f60-aebc-1c5aa82bf66f",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2440,
        1260
      ]
    },
    {
      "parameters": {
        "url": "={{ $('Webhook').item.json.body.attachments[0].url }}",
        "options": {}
      },
      "id": "77245000-1fa6-427c-88cf-33fb115b9ba6",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2160,
        1260
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Simply print out the entire mathematical and/or physics problem in this image.  Do nothing else.\"\n        },\n        {\n          \"inline_data\": {\n            \"mime_type\": \"{{ $('Webhook').item.json.body.attachments[0].contentType }}\",\n            \"data\": \"{{ $json.data }}\"\n          }\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "id": "6486e733-999f-4a87-813f-71a1b2d2470c",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        1260
      ],
      "alwaysOutputData": false,
      "retryOnFail": true,
      "maxTries": 2,
      "credentials": {
        "httpQueryAuth": {
          "id": "nD7ei1tu51CS9KxZ",
          "name": "Google Gemini API Key"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "604fcd65-64e3-4549-883c-168603fc6259",
              "leftValue": "={{ $json.body.attachments[0].url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "012043ed-bcb1-475c-8e34-318e30d0d873",
      "name": "Does Not Have Attachment",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1900,
        860
      ]
    },
    {
      "parameters": {
        "jsCode": "const content = $('Webhook').first().json.body.content\n// Remove the first word from the string\nconst modifiedContent = content.split(' ').slice(1).join(' ');\n\n// Wrap the modified string in an object and return it in an array\nreturn [\n    { json: { content: modifiedContent } }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3040,
        1240
      ],
      "id": "5d904c7a-c601-4860-8965-8f16d7f48866",
      "name": "Code"
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MathJax LaTeX Renderer</title>\n    <!-- Include the MathJax CDN -->\n    <script type=\"text/javascript\" async\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        .math-container {\n            margin: 20px 0;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"math-container\">\n        <p>{{ $json.text }}</p>\n    </div>\n</body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        4820,
        840
      ],
      "id": "4cde57d4-39c3-42ad-9762-1c2ca9e91af1",
      "name": "HTML"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "messages": {
          "messageValues": [
            {
              "message": "You are an AI that converts plain text containing mathematical expressions into properly formatted MathJax for use in HTML or other environments that support MathJax rendering. Your primary objectives are: \n\n1. **Structure the content**: Ensure text is organized using appropriate HTML tags like `<h1>`, `<p>`, and `<div>` for clarity and readability.\n2. **Inline math**: Wrap inline mathematical expressions with `\\( ... \\)` for rendering.\n3. **Block math**: Use `\\[ ... \\]` for standalone mathematical equations and expressions.\n4. **Escape LaTeX commands**: Ensure all LaTeX commands used within MathJax are valid and properly escaped if necessary.\n5. **Explain only when needed**: Add minimal comments or clarifications for your formatting decisions when they enhance understanding.\n\nExample input:\n\nThe equation y^2 - 25 can be factored as (y + 5)(y - 5). Solve for y in the equation y^2 = 25.\n\nExample output:\n\n<p>The equation \\( y^2 - 25 \\) can be factored as \\( (y + 5)(y - 5) \\).</p>\n<p>Solve for \\( y \\) in the equation:</p>\n\\[\ny^2 = 25\n\\]\n\nYour task is to apply this formatting style to the following text input:\n\n**[Input starts here]**  \n{Insert text here}  \n**[Input ends here]**\n\nOutput only the formatted MathJax content without extraneous commentary."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        4460,
        840
      ],
      "id": "b29f6fc8-0b8f-4872-b661-1b870f087d20",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4480,
        1060
      ],
      "id": "c56c7dbf-ae0c-4b48-8af5-4ce86bfc7d3b",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "SXxerOXC902v1BV6",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "745447586697052201",
          "mode": "list",
          "cachedResultName": "BakaBoi's Mall",
          "cachedResultUrl": "https://discord.com/channels/745447586697052201"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $('Webhook').item.json.body.channelId }}",
          "mode": "id"
        },
        "content": "=",
        "options": {
          "message_reference": "={{ $('Webhook').item.json.body.messageId }}"
        },
        "embeds": {
          "values": [
            {
              "description": "="
            }
          ]
        },
        "files": {
          "values": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        6360,
        840
      ],
      "id": "0ebc8274-15c0-4646-b742-8496fd404834",
      "name": "Discord3",
      "webhookId": "a7df39f3-1915-4bba-84e5-c19213d7aded",
      "retryOnFail": true,
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "745447586697052201",
          "mode": "list",
          "cachedResultName": "BakaBoi's Mall",
          "cachedResultUrl": "https://discord.com/channels/745447586697052201"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $('Webhook').item.json.body.channelId }}",
          "mode": "id"
        },
        "content": "=",
        "options": {
          "message_reference": "={{ $('Webhook').item.json.body.messageId }}"
        },
        "embeds": {
          "values": [
            {
              "description": "Error: Overloaded with niggatry."
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        3620,
        1400
      ],
      "id": "21d67ad0-53fe-4f56-a9f1-9e3cbb3fe902",
      "name": "Discord4",
      "webhookId": "3f5888f8-3cc3-469e-b6a6-78bb13e34220",
      "retryOnFail": true,
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "745447586697052201",
          "mode": "list",
          "cachedResultName": "BakaBoi's Mall",
          "cachedResultUrl": "https://discord.com/channels/745447586697052201"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $('Webhook').item.json.body.channelId }}",
          "mode": "id"
        },
        "content": "=",
        "options": {
          "message_reference": "={{ $('Webhook').item.json.body.messageId }}"
        },
        "embeds": {
          "values": [
            {
              "description": "Error: Overloaded with niggatry."
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        3060,
        1500
      ],
      "id": "323b0458-276d-4d9a-8fa1-e0d135e3ea1a",
      "name": "Discord5",
      "webhookId": "ba62dc80-93f3-4e54-bc94-def7d8836f2e",
      "retryOnFail": true,
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bakabot",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1140,
        860
      ],
      "id": "f40b73ae-9dc4-4b4f-9fff-84d388342e83",
      "name": "Webhook",
      "webhookId": "5d0d84da-6a1a-465f-9730-729ee29b4074"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "745447586697052201",
          "mode": "list",
          "cachedResultName": "BakaBoi's Mall",
          "cachedResultUrl": "https://discord.com/channels/745447586697052201"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $json.body.channelId }}",
          "mode": "id"
        },
        "content": "you got it daddy 😫 (generation takes 5-15s)",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2100,
        420
      ],
      "id": "4d625d52-d8db-41e3-bee1-26eced9ecb07",
      "name": "Discord1",
      "webhookId": "361e3c9d-f8b1-4237-83ce-38656a683d97",
      "retryOnFail": true,
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        6560,
        420
      ],
      "id": "ee9e2e41-222d-45be-b50d-18752939357f",
      "name": "Merge"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "deleteMessage",
        "guildId": {
          "__rl": true,
          "value": "745447586697052201",
          "mode": "list",
          "cachedResultName": "BakaBoi's Mall",
          "cachedResultUrl": "https://discord.com/channels/745447586697052201"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $json.channel_id }}",
          "mode": "id"
        },
        "messageId": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        6780,
        420
      ],
      "id": "351d4f75-22fd-4f2d-994c-7e497f42758e",
      "name": "Discord6",
      "executeOnce": true,
      "retryOnFail": true,
      "webhookId": "03ef3242-a95e-411c-be6f-b8434914e753",
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://baka-discord-service.dynuddns.com/html-to-image",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "htmlFile",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6060,
        840
      ],
      "id": "bad42501-005a-4255-93f0-796ffc4623da",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "html",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        5120,
        840
      ],
      "id": "0a244e76-ed66-438c-930a-052c8edfa744",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        5420,
        840
      ],
      "id": "317f3e94-1407-402b-977b-f1393247b999",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {
          "mimeType": "text/html"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        5740,
        840
      ],
      "id": "30a55532-0a65-4052-99ee-846f0a4c48a7",
      "name": "Convert to File2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d614455c-fc95-4a7c-a39f-405fd1651b9f",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "^bb[^\\w]*[^a-zA-Z0-9].*$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1480,
        860
      ],
      "id": "d051e283-f51e-4a3a-8e9f-3457b61dffcb",
      "name": "Filter"
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=User input: {{ $json.content }}\n\nImage Description: {{ $('HTTP Request1').item.json.candidates[0].content.parts[0].text }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3280,
        1240
      ],
      "id": "13f07f5d-9484-4de7-af5e-b471d73618d3",
      "name": "AI Agent",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.body.userId }}",
        "tableName": "bb_chat_histories"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        3400,
        1520
      ],
      "id": "68ad2fca-2261-4b97-a0a1-cf449df769da",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "d2lXGCTjZwwS5QLF",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek-r1-distill-llama-70b",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3380,
        2140
      ],
      "id": "fc3ed60c-b4a4-41d2-91b1-50d86f95bd6d",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "Yi51lX7Jst94KFYD",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=User Input: {{ $('Webhook').item.json.body.content }}\n\nAttachments (if applicable): {{ $json.data }}",
        "options": {
          "systemMessage": "You are an AI model created by **BakaBoi341** to assist users with mathematics and physics questions on Discord, along with other subjects. Your responses should be clear, accurate, and concise, while adapting to the user’s level of knowledge. Keep these principles in mind:  \n\n1. **Clarity and Structure**:  \n   - Start by restating or summarizing the problem for context.  \n   - Present solutions in a clear sequence, using bullet points (`-`) or numbered steps when appropriate.  \n   - Define technical terms or offer brief explanations when needed.  \n   - Go outside the parameters outlined if the input is not related to an educational subject.  \n\n2. **Accuracy and Rigor**:  \n   - Ensure that all calculations, explanations, and concepts are correct.  \n   - Use Unicode symbols for clarity (e.g., `x² + y² = z²` for exponents, `√x` for square roots).  \n   - Simplify answers when possible and, if relevant, provide alternative approaches.  \n\n3. **Adaptability**:  \n   - Tailor responses to the user’s experience level. Be concise for experienced users; provide additional explanations for those new to the subject.  \n   - Offer different solution methods if applicable, or ask if the user has a preferred approach (e.g., algebraic vs. geometric).  \n\n4. **Guidance and Encouragement**:  \n   - Offer hints or suggest next steps for users seeking to learn instead of just receiving the solution.  \n   - Break down complex problems into simpler parts and summarize key points at the end if needed.  \n\n5. **Discord Formatting**:  \n   - Use backticks (`` ` ``) for inline code and triple backticks (`` ``` ``) for blocks of code or equations to enhance readability.  \n   - Utilize lists (e.g., `-` for bullet points) to organize steps and explanations.  \n   - Suggest visual aids (like graphs or diagrams) when appropriate but describe them clearly if they can’t be provided.  \n\n6. **Transparency**:  \n   - If the problem is complex or ambiguous, ask clarifying questions instead of making assumptions.  \n   - If unsure of a solution, explain this and recommend an approach or resource for further help.  \n\nYour goal is to make mathematics, physics, and other subjects engaging, accessible, and educational for users of all levels on Discord.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3360,
        1780
      ],
      "id": "270a7173-b084-43fd-a838-7954b56fa3bd",
      "name": "AI Agent1",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.body.userId }}",
        "tableName": "bb_chat_histories"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        3520,
        2120
      ],
      "id": "3cc0c214-df0e-4e72-bf68-d3676302d5df",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "d2lXGCTjZwwS5QLF",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "745447586697052201",
          "mode": "list",
          "cachedResultName": "BakaBoi's Mall",
          "cachedResultUrl": "https://discord.com/channels/745447586697052201"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $('Webhook').item.json.body.channelId }}",
          "mode": "id"
        },
        "content": "=",
        "options": {
          "message_reference": "={{ $('Webhook').item.json.body.messageId }}"
        },
        "embeds": {
          "values": [
            {
              "description": "Error: Overloaded with niggatry."
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        4220,
        2060
      ],
      "id": "47843932-f0a4-480b-9c44-2e86745e2d65",
      "name": "Discord",
      "webhookId": "0d6f2ec7-c9fa-4b9e-8e48-7a1a4fbb8995",
      "retryOnFail": true,
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $('Webhook').item.json.body.attachments[0].url }}",
        "options": {}
      },
      "id": "dce64159-c677-4a94-9137-1770c3103ae5",
      "name": "Get TXT File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        1780
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dd5da31e-0f76-4e51-a61e-f9b98be3df5b",
              "leftValue": "={{ $json.body.attachments[0].url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "a04e9d68-190d-43a4-99c8-8a9bb2a0c2b7",
              "leftValue": "={{ $json.body.attachments[0].name }}",
              "rightValue": ".txt",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "3398a995-198f-44ba-8d05-34858a9cd334",
              "leftValue": "={{ $json.body.attachments[0].name }}",
              "rightValue": ".pdf",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "48505dea-3fe6-4abb-995b-93b5850a63a0",
      "name": "Has Image",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1880,
        1260
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.attachments[0].name }}",
                    "rightValue": ".txt",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IS TXT"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "93176bc1-4bd3-404b-889e-d510c164d489",
                    "leftValue": "={{ $json.body.attachments[0].name }}",
                    "rightValue": ".pdf",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IS PDF"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2120,
        1800
      ],
      "id": "3a878bdc-434a-4a91-a327-0c03cb116b36",
      "name": "Switch"
    },
    {
      "parameters": {
        "url": "={{ $('Webhook').item.json.body.attachments[0].url }}",
        "options": {}
      },
      "id": "2fed2d16-ce39-48a0-ad92-618bb21694b8",
      "name": "Get PDF File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2280,
        2160
      ]
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2500,
        2160
      ],
      "id": "75adb252-b715-4142-843f-1520dbe55a48",
      "name": "Extract from File3"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    text: $input.first().json.output\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3900,
        1640
      ],
      "id": "f4cfd48e-2159-4527-b39c-58af7655ad30",
      "name": "Code1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "48398721-f3c7-469c-ba14-cf50f639e4aa",
              "leftValue": "={{ $json.body.attachments[0].name }}",
              "rightValue": ".txt",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "3c78e28f-0fa9-486f-b078-f94032ef5cc3",
              "leftValue": "={{ $json.body.attachments[0].name }}",
              "rightValue": ".pdf",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1880,
        1800
      ],
      "id": "9b317efd-22ec-4347-bac6-eaf32e6bd61b",
      "name": "Attachment is TXT file or PDF"
    },
    {
      "parameters": {
        "model": "deepseek-r1-distill-llama-70b",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3300,
        1520
      ],
      "id": "f11d2c7c-2e6c-4a8b-a161-b2f49a4f98eb",
      "name": "Groq Chat Model3",
      "credentials": {
        "groqApi": {
          "id": "Yi51lX7Jst94KFYD",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    output: $input.first().json.output\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3440,
        840
      ],
      "id": "170ea955-53b1-40cd-a2e0-5b9173711f7c",
      "name": "Code2"
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.content }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an AI model created by **BakaBoi341** to assist users with mathematics and physics questions on Discord, along with other subjects. Your responses should be clear, accurate, and concise, while adapting to the user’s level of knowledge. Keep these principles in mind:  \n\n1. **Clarity and Structure**:  \n   - Start by restating or summarizing the problem for context.  \n   - Present solutions in a clear sequence, using bullet points (`-`) or numbered steps when appropriate.  \n   - Define technical terms or offer brief explanations when needed.  \n   - Go outside the parameters outlined if the input is not related to an educational subject.  \n\n2. **Accuracy and Rigor**:  \n   - Ensure that all calculations, explanations, and concepts are correct.  \n   - Use Unicode symbols for clarity (e.g., `x² + y² = z²` for exponents, `√x` for square roots).  \n   - Simplify answers when possible and, if relevant, provide alternative approaches.  \n\n3. **Adaptability**:  \n   - Tailor responses to the user’s experience level. Be concise for experienced users; provide additional explanations for those new to the subject.  \n   - Offer different solution methods if applicable, or ask if the user has a preferred approach (e.g., algebraic vs. geometric).  \n\n4. **Guidance and Encouragement**:  \n   - Offer hints or suggest next steps for users seeking to learn instead of just receiving the solution.  \n   - Break down complex problems into simpler parts and summarize key points at the end if needed.  \n\n5. **Discord Formatting**:  \n   - Use backticks (`` ` ``) for inline code and triple backticks (`` ``` ``) for blocks of code or equations to enhance readability.  \n   - Utilize lists (e.g., `-` for bullet points) to organize steps and explanations.  \n   - Suggest visual aids (like graphs or diagrams) when appropriate but describe them clearly if they can’t be provided.  \n\n6. **Transparency**:  \n   - If the problem is complex or ambiguous, ask clarifying questions instead of making assumptions.  \n   - If unsure of a solution, explain this and recommend an approach or resource for further help.  \n\nYour goal is to make mathematics, physics, and other subjects engaging, accessible, and educational for users of all levels on Discord.  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        2740,
        860
      ],
      "id": "65cc97fd-1108-4b95-81b3-95f84689d90b",
      "name": "AI Agent2",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "745447586697052201",
          "mode": "list",
          "cachedResultName": "BakaBoi's Mall",
          "cachedResultUrl": "https://discord.com/channels/745447586697052201"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $('Webhook').item.json.body.channelId }}",
          "mode": "id"
        },
        "content": "=",
        "options": {
          "message_reference": "={{ $('Webhook').item.json.body.messageId }}"
        },
        "embeds": {
          "values": [
            {
              "description": "Error: Overloaded with niggatry."
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        3120,
        1040
      ],
      "id": "f99be6ec-d9a3-4c4e-8d84-56ae1fb3e9b1",
      "name": "Discord7",
      "webhookId": "0d6f2ec7-c9fa-4b9e-8e48-7a1a4fbb8995",
      "retryOnFail": true,
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      }
    },
    {
      "parameters": {
        "model": "deepseek-r1-distill-llama-70b",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2740,
        1080
      ],
      "id": "253e4e9e-16f8-44f5-b956-e87456461a65",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "Yi51lX7Jst94KFYD",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.body.userId }}",
        "tableName": "bb_chat_histories"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2860,
        1080
      ],
      "id": "fef8cf5f-6a39-44e9-9146-e55954371097",
      "name": "Postgres Chat Memory2",
      "credentials": {
        "postgres": {
          "id": "d2lXGCTjZwwS5QLF",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "connection": "keep-alive",
            "host": "bakaflow.gleeze.com",
            "x-forwarded-scheme": "https",
            "x-forwarded-proto": "https",
            "x-forwarded-for": "75.177.85.65",
            "x-real-ip": "75.177.85.65",
            "content-length": "442",
            "content-type": "application/json",
            "accept": "*/*",
            "user-agent": "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)",
            "accept-encoding": "gzip,deflate"
          },
          "params": {},
          "query": {},
          "body": {
            "channel": "ellies-break-room",
            "channelId": "930254213739581511",
            "author": "bakaboi341",
            "userId": "246812164885577729",
            "messageId": "1355023451148128306",
            "content": "bb solve for x",
            "attachments": [
              {
                "url": "https://cdn.discordapp.com/attachments/930254213739581511/1355023450930020493/image.png?ex=67e76b6d&is=67e619ed&hm=be95af5368ebc498a5dad72da9ff2f977cdcc0bc22165b9f643d2da54908dbe4&",
                "name": "image.png",
                "size": 36024,
                "contentType": "image/png"
              }
            ]
          },
          "webhookUrl": "https://bakaflow.gleeze.com/webhook/bakabot",
          "executionMode": "production"
        }
      }
    ]
  },
  "repo_name": "n8n-backup",
  "repo_owner": "trazonm",
  "repo_path": "backup-",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-11-15T04:55:24.768Z",
      "updatedAt": "2024-11-15T04:55:24.768Z",
      "id": "fbNR3j10OPFaIddI",
      "name": "discord"
    },
    {
      "createdAt": "2024-12-04T06:27:23.212Z",
      "updatedAt": "2024-12-04T06:27:23.212Z",
      "id": "kckGg4PTeUpEwe5c",
      "name": "ai"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-04-19T23:57:19.000Z",
  "versionId": "7806086c-7db9-467d-9b3d-5d051a4fb545"
}