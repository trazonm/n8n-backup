{
  "active": false,
  "connections": {
    "Log Results": {
      "main": [
        []
      ]
    },
    "Score & Report": {
      "main": [
        [
          {
            "node": "Discord Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord Notification": {
      "main": [
        [
          {
            "node": "Log Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process All Data": {
      "main": [
        [
          {
            "node": "Score & Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Test Trigger": {
      "main": [
        [
          {
            "node": "Fetch All Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch All Sources": {
      "main": [
        [
          {
            "node": "Process All Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-13T18:47:31.708Z",
  "id": "uMMbIMi5KbVS8T4U",
  "isArchived": true,
  "meta": null,
  "name": "Niche Hunter - SIMPLIFIED WORKING VERSION",
  "nodes": [
    {
      "id": "manual-trigger",
      "name": "Manual Test Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        100,
        200
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "fetch-all",
      "name": "Fetch All Sources",
      "type": "n8n-nodes-base.code",
      "position": [
        320,
        200
      ],
      "parameters": {
        "jsCode": "// Simplified data fetching with mock data for testing\nconst testMode = true; // Set to false for real API calls\n\nif (testMode) {\n  // Return mock data for testing\n  const mockData = [\n    {\n      label: 'notion template',\n      signals: {\n        reddit_posts: 20,\n        reddit_questions: 8,\n        reddit_upvotes: 1200,\n        gum_count: 25,\n        gum_avg_price: 15,\n        trend_ratio: 1.2,\n        pinterest_signal: 45\n      }\n    },\n    {\n      label: 'client onboarding',\n      signals: {\n        reddit_posts: 15,\n        reddit_questions: 12,\n        reddit_upvotes: 800,\n        gum_count: 18,\n        gum_avg_price: 22,\n        trend_ratio: 1.4,\n        pinterest_signal: 38\n      }\n    },\n    {\n      label: 'meal prep guide',\n      signals: {\n        reddit_posts: 18,\n        reddit_questions: 6,\n        reddit_upvotes: 950,\n        gum_count: 32,\n        gum_avg_price: 12,\n        trend_ratio: 0.8,\n        pinterest_signal: 52\n      }\n    }\n  ];\n  \n  console.log('Using mock data for testing');\n  return mockData.map(item => ({ json: item }));\n}\n\n// Real API calls would go here\n// For now, return empty array\nreturn [{ json: { error: 'Real API calls not implemented yet' } }];"
      },
      "typeVersion": 2
    },
    {
      "id": "process-data",
      "name": "Process All Data",
      "type": "n8n-nodes-base.code",
      "position": [
        540,
        200
      ],
      "parameters": {
        "jsCode": "// Process and validate all input data\nconst items = $input.all();\nconsole.log(`Processing ${items.length} items`);\n\n// Filter out any error items\nconst validItems = items.filter(item => item.json && !item.json.error);\n\nif (validItems.length === 0) {\n  console.log('No valid data to process');\n  return [{\n    json: {\n      processed_niches: [],\n      timestamp: new Date().toISOString(),\n      status: 'no_data'\n    }\n  }];\n}\n\nconsole.log(`Found ${validItems.length} valid niches to process`);\n\nreturn [{\n  json: {\n    processed_niches: validItems.map(item => item.json),\n    timestamp: new Date().toISOString(),\n    status: 'success'\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "score-report",
      "name": "Score & Report",
      "type": "n8n-nodes-base.code",
      "position": [
        760,
        200
      ],
      "parameters": {
        "jsCode": "// Score niches and generate report\nconst data = $input.item.json;\n\nif (data.status !== 'success' || !data.processed_niches) {\n  return [{\n    json: {\n      report: {\n        top_3: [],\n        winner: null,\n        error: 'No data available for scoring'\n      },\n      discord_message: 'üéØ **Daily Niche Hunter Report**\\n\\n‚ùå No data available for analysis.',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nconst niches = data.processed_niches;\n\n// Score each niche\nconst scoredNiches = niches.map(niche => {\n  const signals = niche.signals;\n  \n  // Scoring rubric (0-100 total)\n  const demand = Math.min(signals.reddit_questions / 5, 1) * 20 + \n                Math.min(signals.reddit_upvotes / 500, 1) * 15;\n  \n  const monet = Math.min(signals.gum_count / 20, 1) * 10 + \n               Math.min(signals.gum_avg_price / 40, 1) * 15;\n  \n  const comp = (1 - Math.min(signals.gum_count / 30, 1)) * 20;\n  \n  const trend = Math.min(signals.trend_ratio / 1.3, 1) * 15 + \n               Math.min(signals.pinterest_signal / 50, 1) * 5;\n  \n  const total = Math.round(demand + monet + comp + trend);\n  \n  // Go/No-Go criteria\n  const go = total >= 65 && \n            signals.gum_avg_price >= 9 && \n            signals.trend_ratio >= 0.9 && \n            signals.gum_count <= 45;\n  \n  return {\n    label: niche.label,\n    signals: signals,\n    scores: {\n      demand: Math.round(demand),\n      monet: Math.round(monet),\n      comp: Math.round(comp),\n      trend: Math.round(trend),\n      total: total\n    },\n    go: go\n  };\n});\n\n// Sort by total score descending\nscoredNiches.sort((a, b) => b.scores.total - a.scores.total);\n\n// Get top 3\nconst top3 = scoredNiches.slice(0, 3);\n\n// Product ideas based on niche\nconst getProductIdea = (niche) => {\n  const templates = [\n    `Complete ${niche} Template Bundle`,\n    `${niche} Checklist & Planning Kit`,\n    `Ultimate ${niche} Guide with Templates`,\n    `${niche} Workflow & Process Templates`,\n    `${niche} Planner & Tracking System`\n  ];\n  return templates[Math.floor(Math.random() * templates.length)];\n};\n\n// Price suggestion based on scores\nconst suggestPrice = (scores) => {\n  if (scores.total >= 80) return 29;\n  if (scores.total >= 70) return 19;\n  return 12;\n};\n\n// Create report\nconst report = {\n  top_3: top3.map(item => ({\n    niche: item.label,\n    score: item.scores.total,\n    product_idea: getProductIdea(item.label),\n    price_usd: suggestPrice(item.scores),\n    go: item.go\n  })),\n  winner: null\n};\n\n// Set winner (first Go item or highest scoring)\nconst winner = top3.find(item => item.go) || top3[0];\nif (winner) {\n  const baseKeywords = ['template', 'checklist', 'planner', 'guide', 'notion'];\n  const nicheTokens = winner.label.toLowerCase().split(/[\\s+]+/).filter(t => t.length > 2);\n  const seedKeywords = [...new Set([...nicheTokens, ...baseKeywords])].slice(0, 8);\n  \n  report.winner = {\n    niche: winner.label,\n    seed_keywords: seedKeywords,\n    score: winner.scores.total\n  };\n}\n\n// Create Discord message\nlet message = `üéØ **Daily Niche Hunter Report** - ${new Date().toLocaleDateString()}\\n\\n**TOP 3 NICHES:**\\n\\n`;\n\ntop3.forEach((item, index) => {\n  const emoji = item.go ? '‚úÖ GO' : '‚è∏Ô∏è HOLD';\n  message += `**${index + 1}. ${item.niche}** (${emoji})\\n`;\n  message += `   üìä Score: ${item.scores.total}/100\\n`;\n  message += `   üí° Product: ${getProductIdea(item.label)}\\n`;\n  message += `   üí∞ Price: $${suggestPrice(item.scores)}\\n\\n`;\n});\n\nif (report.winner) {\n  message += `üèÜ **WINNER:** ${report.winner.niche}\\n`;\n  message += `üîë **Keywords:** ${report.winner.seed_keywords.join(', ')}\\n\\n`;\n} else {\n  message += `‚ùå **No winner** - No niches met Go criteria.\\n\\n`;\n}\n\nmessage += `*Analyzed ${niches.length} niches*`;\n\nreturn [{\n  json: {\n    report: report,\n    discord_message: message,\n    timestamp: data.timestamp,\n    analyzed_count: niches.length\n  }\n}];"
      },
      "typeVersion": 2
    },
    {
      "id": "discord-notify",
      "name": "Discord Notification",
      "type": "n8n-nodes-base.discord",
      "position": [
        980,
        100
      ],
      "parameters": {
        "content": "={{ $json.discord_message }}",
        "guildId": {
          "__rl": true,
          "mode": "list",
          "value": "745447586697052201",
          "cachedResultName": "BakaBoi's Mall"
        },
        "resource": "message",
        "channelId": {
          "__rl": true,
          "mode": "list",
          "value": "1416490152985104494",
          "cachedResultName": "niche-hunter"
        },
        "authentication": "oAuth2"
      },
      "credentials": {
        "discordOAuth2Api": {
          "id": "UEztFF3QWknIwrx9",
          "name": "BakaBot"
        }
      },
      "typeVersion": 2,
      "onError": "continueRegularOutput"
    },
    {
      "id": "log-results",
      "name": "Log Results",
      "type": "n8n-nodes-base.set",
      "position": [
        980,
        300
      ],
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "execution_log",
              "name": "execution_log",
              "type": "object",
              "value": "={{ {\n  timestamp: $json.timestamp || $now.toISO(),\n  analyzed_count: $json.analyzed_count || 0,\n  top_niche: $json.report?.top_3?.[0]?.niche || 'none',\n  winner: $json.report?.winner?.niche || 'none',\n  winner_score: $json.report?.winner?.score || 0,\n  status: 'completed'\n} }}"
            }
          ]
        }
      },
      "typeVersion": 3.4
    }
  ],
  "pinData": null,
  "repo_name": "n8n-backup",
  "repo_owner": "trazonm",
  "repo_path": "backup-",
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "shared": [
    {
      "createdAt": "2025-09-13T18:47:31.711Z",
      "updatedAt": "2025-09-13T18:47:31.711Z",
      "role": "workflow:owner",
      "workflowId": "uMMbIMi5KbVS8T4U",
      "projectId": "fIUCquZNbk42dQ17"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-13T19:19:19.000Z",
  "versionId": "e6049d01-12df-4df8-be3d-ba46cbbda816"
}